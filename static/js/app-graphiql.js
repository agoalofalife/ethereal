$(function(e){function n(e){o.query=e,r()}function t(e){o.variables=e,r()}function r(){var e="?"+Object.keys(o).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(o[e])}).join("&");history.replaceState(null,null,e)}function a(e){return fetch(window.location.origin+"/graphql",{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){return e.json()})}var i=window.location.search,o={};if(i.substr(1).split("&").forEach(function(e){var n=e.indexOf("=");n>=0&&(o[decodeURIComponent(e.slice(0,n))]=decodeURIComponent(e.slice(n+1)))}),o.variables)try{o.variables=JSON.stringify(JSON.parse(query.variables),null,2)}catch(s){}e.renderGraphiql=function(e){var r=React.createElement(GraphiQL.Toolbar,{},["Source available at ",React.createElement("a",{href:"https://github.com/sogko/golang-graphql-playground"},"github")]);React.render(React.createElement(GraphiQL,{fetcher:a,query:o.query,variables:o.variables,onEditQuery:n,onEditVariables:t,defaultQuery:"# Welcome to GraphiQL\n#\n# GraphiQL is an in-browser IDE for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will\n# see intelligent typeaheads aware of the current GraphQL type schema and\n# live syntax and validation errors highlighted within the text.\n#\n# To bring up the auto-complete at any point, just press Ctrl-Space.\n#\n# Press the run button above, or Cmd-Enter to execute the query, and the result\n# will appear in the pane to the right.\n\nquery RebelsShipsQuery {\n  rebels {\n    name\n    ships(first: 1) {\n      edges {\n        node {\n          name \n        }\n      }\n    }\n  }\n}"},r),e)}}(window));